# Zifan Yang
# zyang45@jhu.edu
import sys
from MyException import *

class ErrorHandeler():
	sourceStr = ""				# origin input str (from file or stdin)
	tokenList = None			# origin token list generated by Scanner
	allErrMsgList = []			# all the error message
	supressedErrMsgList = []	# the error message filtered out cascading error (distance set to 4)
	errPosList = []				# the position of all the error token (in tokenList[])
	weakErrPosList = []			# the position of weak symbol error token only (in tokenList[])
	color_input_string = ""		# the source string with color indicator (red means odinary err, blue means weak symbol error)
	ERRORHEADER = "error: "
	lastErrPos = -10			# record the postion of the last error that has not been supressed

	STErrMsgList = []			# record the Symbol Table error introduced in Assignemtn3
	ASTErrMsgList = []			# record the Abstract Symbol Tree error introduced in Assignemtn4


	def __init__(self, sourceStr):
		self.sourceStr = sourceStr
		self.tokenList = None
		self.allErrMsgList = []
		self.supressedErrMsgList = []
		self.errPosList = []
		self.weakErrPosList = []
		self.color_input_string = ""
		self.lastErrPos = -10
		self.STErrMsgList = []
		self.ASTErrMsgList = []

	def add_tokenList(self, tokenList):
		self.tokenList = tokenList

	def Record_Err(self, errClass, errMsg, errTokenPos=-1, isWeak=False):
		errMsg = ERRORHEADER + errMsg
		self.allErrMsgList.append(errMsg)

		# supress error here
		if errTokenPos == -1 or (errTokenPos-self.lastErrPos)>4: 
			self.supressedErrMsgList.append(errMsg)
			self.lastErrPos = errTokenPos

		# collect weak symbol error here
		if errTokenPos != -1 and errTokenPos not in self.errPosList :
			self.errPosList.append(errTokenPos)
			if isWeak == True:
				self.weakErrPosList.append(errTokenPos)

	def Record_ST_Err(self, errClass, errMsg, errTokenPos=-1):
		errMsg = ERRORHEADER +" <ST> "+ errMsg
		self.STErrMsgList.append(errMsg)
		self.allErrMsgList.append(errMsg)

		# supress error here
		if errTokenPos == -1 or (errTokenPos-self.lastErrPos)>4: 
			self.supressedErrMsgList.append(errMsg)
			self.lastErrPos = errTokenPos

	def Record_AST_Err(self, errClass, errMsg, errTokenPos=-1):
		errMsg = ERRORHEADER +" <AST> "+ errMsg
		self.ASTErrMsgList.append(errMsg)
		self.allErrMsgList.append(errMsg)

		# supress error here
		if errTokenPos == -1 or (errTokenPos-self.lastErrPos)>4: 
			self.supressedErrMsgList.append(errMsg)
			self.lastErrPos = errTokenPos


	def Record_Interpreter_Err(self, errClass, errMsg, errTokenPos=-1):
		errMsg = ERRORHEADER +" <Interpreter> "+ errMsg 
		raise ParserException(errMsg)

	def Record_Machine_Restriction_Err(self, errClass, errMsg, errTokenPos=-1):
		errMsg = ERRORHEADER +" <Machine_Restriction> "+ errMsg 
		raise ParserException(errMsg)


	def red(self, text):
		return "\033[1;31m{}\033[0;0m".format(text)

	def blue(self, text):
		return "\033[1;34m{}\033[0;0m".format(text)

	def generate_color_input_string(self):
		newStr = self.sourceStr
		add = 0
		for tmppos in self.errPosList:
			errToken = self.tokenList[tmppos]
			startPos = errToken.startPos + add
			endPos = errToken.endPos + add
		
			pre = newStr[0:startPos]
			post = newStr[endPos+1:]
			mid = newStr[startPos:endPos+1]
			if tmppos in self.weakErrPosList:
				mid = self.blue(mid)
				add+=13
			else:
				mid = self.red(mid)
				add+=13
			# print(pre)
			# print(mid)
			# print(post)
			# print("------------")
			newStr = pre+mid+post
			# add+=13

		self.color_input_string = newStr

	def show_err(self):
		### this is for debug only ###
		# self.generate_color_input_string()
		# print(self.color_input_string)
		### ###################### ###
		ErrMsg = ""

		usingList = self.supressedErrMsgList
		# usingList = self.allErrMsgList

		for tmpErr in usingList:
			ErrMsg += tmpErr+"\n"


		if len(usingList) == 0:
			pass
		else:
			ErrMsg = ErrMsg[0:len(ErrMsg)-1]
			raise ParserException(ErrMsg)

	def show_AST_err(self):
		ErrMsg = ""
		usingList = self.ASTErrMsgList
		for tmpErr in usingList:
			print(tmpErr)

